Through Eclipse:
	subtyping checker with Aquals:  Works
	NonNegChecker: no
	add annotatedtypefactory: no
	subtypeing: works
	override Qualifiers method in the factory: no 
		@Override 
		protected Set<Class<? extends Annotation>> createSupportedTypeQualifiers() {
		      return Collections.unmodifiableSet(new HashSet<Class<? extends Annotation>>(Arrays.asList(Unknown.class,NonNegative.class)));
		  }
	add intro rule in factory: no
	subtypeing with aquals: works
	add BaseTypeVisitor: no
	remove factory keep visitor: no
	factory back, add array rule in visitor(didnt expect much): no
	subtyping checker: works
	rewrite the annotation files from scratch(why not): no
	subtyping checker: works
	throw out factory and visitor: no
	bring back files, remove override: no
	
	Command Line:
		nullness checker: javacheck -processor org.checkerframework.checker.nullness.NullnessChecker ./test/testTrivial.java
		works
		
		subtyping checker:javacheck -processor org.checkerframework.common.subtyping.SubtypingChecker -Aquals=Trivial.qual.NonNegative,Trivial.qual.Unknown ./test/testTrivial.java
		works
		
		NonNeg checker:
			compile: javacheck Trivial/NonNegChecker.java
			run:javacheck -processor Trivial.NonNegChecker ./test/testTrivial.java
				error: GenericAnnotatedTypeFactory.createQualifierDefaults: @DefaultQualifierInHierarchy or @DefaultFor(TypeUseLocation.OTHERWISE) not found. Every checker must specify a default qualifier. 1 qualifiers examined: org.checkerframework.framework.qual.PolyAll; invoke the compiler with -AprintErrorStack to see the stack trace.
				1 error
			
			compile: javacheck Trivial/NonNegChecker.java Trivial/NonNegAnnotatedTypeFactory.java Trivial/NonNegVisitor.java
			run:javacheck -processor Trivial.NonNegChecker ./test/testTrivial.java
				error: InvocationTargetException when invoking constructor for class Trivial.NonNegVisitor; Underlying cause: java.lang.ClassCastException: Trivial.NonNegAnnotatedTypeFactory cannot be cast to org.checkerframework.framework.type.GenericAnnotatedTypeFactory; invoke the compiler with -AprintErrorStack to see the stack trace.
				1 error
			
			
		Change @Target of classes to @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) from @Target({ElementType.TYPE_USE, ElementType.PARAMETER})
		
			compile quals: javacheck Trivial/qual/*.java
			compile checker: javacheck Trivial/NonNegChecker.class
			run:javacheck -processor Trivial.NonNegChecker ./test/testTrivial.java
				./test/testTrivial.java:8: error: [assignment.type.incompatible] incompatible types in assignment.
				@NonNegative int a = 1; // TODO: Why is '1' '@Unknown int' ?
		                     ^
				  found   : @Unknown int
				  required: @NonNegative int
				./test/testTrivial.java:45: error: [assignment.type.incompatible] incompatible types in assignment.
						@NonNegative int y = x;
						                     ^
				  found   : @Unknown int
				  required: @NonNegative int
				2 errors
			
			
		Works???
		
Plug-in
	after fixing @Target, remove factory and visitor
	NonNegChecker:	works
	
	Put Factory Back:
		error: SourceChecker.typeProcessingStart: unexpected Throwable (ClassCastException); message: Trivial.NonNegAnnotatedTypeFactory cannot be cast to org.checkerframework.framework.type.GenericAnnotatedTypeFactory; invoke the compiler with -AprintErrorStack to see the stack trace.
		1 error
	
	